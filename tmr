#! /usr/bin/env ruby

# TODO:
#   improve flag to stop running timer: --stop
#       - stop timew and kill any tmr processes
#
#   improve notifications: interpolate tag name; icon?
#
#   add error handling to `run_timer`
#   
#   move messages to TimerMessages module; call them as getters
#
#   add help option
#
#   implement option to watch `timew` (approximates a running timer)
#     - would this require forking?
#     - maybe spawn process, keep its pid and kill at end?

require "open3"

class Timer
  attr_reader :options, :valid_tags
  TIME_BLOCK_IN_SECONDS = 25 * 60
  DEFAULTS = { blocks: 1, stop_timer: false }.freeze

  def initialize(opts)
    @valid_tags = extract_tags
    @options = parse_options(opts)
  end

  def run_timer
    system("timew start #{options[:task]} > /dev/null")
    system("notify-send 'Timer initiated for #{options[:task]}'")

    sleep(options[:blocks] * TIME_BLOCK_IN_SECONDS)

    if options[:stop_timer]
      system("timew stop > /dev/null")
      system("notify-send -u critical -t 5000 'Time blocks completed; Timer stopped'")
    else
      system("notify-send -u critical -t 60000 'Time blocks completed; Timer still running!'")
    end

    exit(0)
  end

  private
  def extract_tags
    Open3.capture2("timew tags")[0]
      .sub(/\n.+\n.+\n/, "") # remove header line
      .split(/\n+/)
      .map { |full_tag| full_tag.split[0] }
  end

  def parse_options(opts)
    options = DEFAULTS.dup
    early_exit_opts = /(tags|stop|status|summary)/

    opts.each_with_index do |opt, idx|
      if opt.match?(early_exit_opts)
        execute_early_exit_option(opt)
        exit(0)
      elsif opt.eql?("-t")
        options[:task] = opts[idx + 1]
      elsif opt.eql?("-b")
        options[:blocks] = opts[idx + 1].to_i
      elsif opt.eql?("-s")
        options[:stop_timer] = true
      end
    end

    validate(options)
  end

  def execute_early_exit_option(opt)
    case (opt)
    when "tags"   then STDOUT.puts(valid_tags)
    when "stop"   then system("timew stop")
    when "status" then system("timew status")
    when "summary" then system("timew summary")
    end
  end

  def validate(opts)
    if !opts[:task]
      STDERR.puts("ERROR: value -t (task) must be present")
      exit(1)
    elsif !valid_tags.include?(opts[:task])
      STDERR.puts("ERROR: value of -t (task) must be existing tag")
      exit(1)
    elsif opts[:blocks].to_s.match?(/[^123]/)
      STDERR.puts("ERROR: value of -b (blocks) must be 1, 2 or 3")
      exit(1)
    end

    opts
  end
end

Timer.new(ARGV).run_timer
